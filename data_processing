import numpy as np
import pandas as pd
import torch
from torch.utils.data import Dataset
from sklearn.preprocessing import StandardScaler

### in here we should wrangle the data to be scaled correctly 
### and thereafter be in a form which our model can handle

### from the paper: for numerical attributes they are min-max scaled, for categorical they are one-hot encoded
### instead of modeling timestamps they use the difference between the times?

class FeatureDataset(Dataset):
    def __init__(self, file_name, window_size, col):
        #read csv file
        x_train = []
        y_train = []
        file_out = pd.read_csv(file_name)[col]
        
        #Scaling here?
        
        #sc = StandardScaler()
        #file_out = sc.fit_transform(file_out)
        
        for i in range(window_size-1):
            padding = pd.DataFrame(pd.Series(0)).T
            file_out = pd.concat([padding, file_out]).reset_index(drop = True)
            
        for i in range(window_size, len(file_out)+1):
            x_train.append(file_out.iloc[i-window_size:i].values)
            y_train.append(file_out.iloc[i-1].values)
        
        self.x_train = torch.tensor(x_train, dtype=torch.float32)
        self.y_train = torch.tensor(y_train)
        
    def __len__(self):
        return len(self.y_train)

    def __getitem__(self, idx):
        return self.x_train[idx], self.y_train[idx]
